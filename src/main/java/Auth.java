import com.google.zxing.BarcodeFormat;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import de.taimos.totp.TOTP;
import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Hex;
import java.io.FileOutputStream;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;

/**
 * @author Sergio Araque
 * @version 1.0
 */
public class Auth {
    private static String key;

    /**
     * Constructor
     * @param userKey Secret key provided by the user
     */
    public Auth(String userKey){
        key = userKey;
    }

    /**
     * Constructor
     * @param generate If itÂ´s true, call generateKey method to create a new key.
     *                 In the other case use teh static value of key
     */
    public Auth(boolean generate){
        if(generate) key = generateKey();
    }

    /**
     * Returns the generated key
     * @return
     */
    public String getKey(){
        return key;
    }

    /**
     * Generate the 32 characters key needed by authenticator app
     * @return Base32 secret key
     */
    public String generateKey(){
        SecureRandom num = new SecureRandom();
        byte[] bytes = new byte[20];
        num.nextBytes(bytes);
        return new Base32().encodeAsString(bytes);
    }

    /**
     * Returns TOTP code using the secret key
     * @param key User secret key
     * @return TOTP code
     */
    public String getTOTPCode(String key){
        byte[] bytes = new Base32().decode(key);
        String hexKey = Hex.encodeHexString(bytes);
        return TOTP.getOTP(hexKey);
    }

    /**
     * Validate provided code with the authenticator app code
     * @param code Code to validate
     * @return True or false, depend on if the code is valid
     */
    public boolean validate(String code) {
        try {
            byte[] bytes = new Base32().decode(key);
            String hexKey = Hex.encodeHexString(bytes);
            Thread.sleep(4000); //4 seconds sleep to avoid desync errors
            return TOTP.validate(hexKey,code);
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Creates and save a png file with the QR needed by the authenticator app
     * @param barCode Bar code url. Can be generated by getBarCode method
     * @param filePath Path to save the QR file
     */
    public static void createQR(String barCode, String filePath) {
        try {
            BitMatrix matrix = new MultiFormatWriter().encode(barCode, BarcodeFormat.QR_CODE, 40, 40);
            FileOutputStream out = new FileOutputStream(filePath);
            MatrixToImageWriter.writeToStream(matrix, "png", out);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Generate the QR URL with the provided info. Call createQR method to generate the png file
     * @param account User account. For example: example@mail.com
     * @param issuer  Company name or identifier to show in authenticator app
     * @param filePath Path to save the QR file
     */
    public void generateQR(String account, String issuer, String filePath){
        String urlInfo = URLEncoder.encode(issuer + ":" + account, StandardCharsets.UTF_8).replace("+", "%20");
        String urlSecret = URLEncoder.encode(key, StandardCharsets.UTF_8).replace("+", "%20");
        String urlIssuer = URLEncoder.encode(issuer, StandardCharsets.UTF_8).replace("+", "%20");

        createQR("otpauth://totp/" + urlInfo + "?secret=" + urlSecret + "&issuer=" + urlIssuer, filePath);
    }

}
